#!/usr/bin/env python3

import re
import sys
import subprocess


def current_branch():
    # figure out which branch we're on
    output = subprocess.check_output(['git', 'symbolic-ref', '--short', 'HEAD']).rstrip()
    return output.decode('utf-8')


def proc(f, commit_type, commit_hash):
    '''
    a well-crafted commit message is the best way to communicate context about a change to fellow developers
    and indeed to their future selves
    a diff will tell you what changed, but only the commit message can properly tell you why.
    a commit message shows whether a developer is a good collaborator.

    1. separate subject from body with a blank line
    2. limit the subject line to 50 characters
    3. do not end the subject line with a period
    4. use the imperative mood in the subject line
    5. wrap the body at 72 characters
    6. use the body to explain what and why vs. how
    '''
    branch = current_branch()
    if branch == 'master':
        raise ValueError('commit directly to master branch is prohibited')
    branch_pattern = r'^(?P<category>[a-z]{3,10})-(?P<subject>\w{20,50})'
    r = re.fullmatch(branch_pattern, branch)
    if r is None:
        category = 'category'
        summary = '<brief summary>'
    else:
        category, summary = r.groups()
        expected_categories = {'wip', 'exp', 'feature', 'issue', 'bugfix'}
        if category not in expected_categories:
            category = 'category'
        max_summary_length = 50
        summary = summary[:max_summary_length]
        summary = summary.replace('_', ' ')
    max_line_length = 72
    max_line_count = 30
    subject_pattern = r'^\[(?P<category>[a-z]{3,10})\] (?P<subject>.{20,50})'
    msg = f'''[{category}] {summary}

# The prev line is left blank as a separation of subject and body
# Enforcing policy checking criteria:
# 1. subject line pattern: {subject_pattern}
# 2. expected categories: {expected_categories}
# 3. expected summary length: [20, 50]
# 4. body should wrapped at {max_line_length}
# 5. body line count should keep under {max_line_count}
'''
    content = f.read()
    f.seek(0, 0)
    f.write(msg)
    f.write(content)


if __name__ == '__main__':
    # collect the parameters
    commit_msg_filepath = sys.argv[1]
    argc = len(sys.argv)
    if argc > 2:
        commit_type = sys.argv[2]
    else:
        commit_type = ''
    if argc > 3:
        commit_hash = sys.argv[3]
    else:
        commit_hash = ''
    try:
        with open(commit_msg_filepath, 'r+') as f:
            proc(f, commit_type, commit_hash)
    except Exception as e:
        print(f'prepare-commit-msg: ERROR! {e}')
        sys.exit(1)
