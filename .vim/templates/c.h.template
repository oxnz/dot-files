#!/usr/bin/env python
# 
import os
import sys
import time

def cheader(header):
    ccommon()
    print '''
#ifndef {}
#define {}

#endif//{}
'''.format(header, header, header)

def cppmain(codelines = 'std::cout << "Hello world!" << std::endl;'):
    cmain(codelines)

def cmain(codelines = 'printf("Hello World!\\n");'):
    print '''
int main(int argc, char *argv[]) {{
    {}

    return 0;
}}'''.format(codelines)

def cppcommon():
    ccommon()

def cppsource(filename):
    cppcommon()
    print '''
#include <iostream>
#include "{}.h"

using namespace std;
'''.format(filename)
    
    if filename == 'main':
        cppmain()

def csource(filename):
    ccommon()
    print '''
#include <stdio.h>
#include <stdlib.h>
#include "{}.h"
'''.format(filename)

    if filename == 'main':
        cmain()

def ccommon():
    common()

def javasource(filename):
    classname = filename
    common()
    print '''
public class {} {{
    public {} {{
    }}

    public static void main(String[] args) {{
        System.out.println("Hello world!");
    }}
}}'''.format(classname, classname)

def common():
    print '''/*
 * Filename:	[&expand('%:t')]
 *
 * Author:		[$AUTHOR]
 * Email:		[$EMAIL]
 * Created:		[!date '+\[%F %T %Z\]']
 * Last-update:	[=time.strftime('%F %T %Z')]
 * Description: [$anchor]
 *
 * Version:		[$VERSION]
 * Revision:	[NONE]
 * Revision history:	[NONE]
 * Date Author Remarks:	[NONE]
 *
 * License: 
 * Copyright (c) 2013 Oxnz
 *
 * Distributed under terms of the [LICENSE] license.
 * [license]
 *
 */'''

class OxnzTemplate(object):
    def __init__(self, filetype, filepath):
        dirname = os.path.dirname(filepath)
        basename = os.path.basename(filepath)
        filename, suffix = os.path.splitext(basename)
        self.optdict = {
                'c.h': lambda: cheader('_{}_H_'.format(filename.upper())),
                'c.c': lambda: csource(filename),
                'cpp.cpp': lambda: cppsource(filename),
                'cpp.cc': lambda: cppsource(filename),
                'cpp.h': lambda: cheader('_{}_H_'.format(filename.upper())),
                'java.java': lambda: javasource(filename),
        }
        self.func = self.optdict[filetype + suffix]

    def __call__(self):
        self.func()


if __name__ == '__main__':
    if len(sys.argv) == 3:
        OxnzTemplate(*sys.argv[1:])()
    else:
        progname = os.path.basename(__file__)
        print >>sys.stderr, 'Usage: {} filetype filepath'.format(sys.argv[0])
        sys.exit(1)
