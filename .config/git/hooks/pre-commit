#!/usr/bin/env python3
#
# This hook is invoked by git-commit(1), and can be bypassed with the --no-verify option.
# The pre commit hook is executed before git asks the developer for a commit message
# or creates a commit package.
# This hook can be used to make sure certain checks pass before a commit
# can be considered worthy to be made to the remote.
# No arguments are passed to the pre-commit script
# and if the script exists with a non zero value, the commit event will be aborted.
#
#
# This hook enforcing policy check:
#   1. nonascii filenames
#       * this can cause problems on different platforms.
#       * to be portable it is advisable to rename the file.
#       * this can be disabled by cmd: git config hooks.allownonascii true
#   2. whitespace errors
#


import sys
import subprocess as subp
from common import current_branch, msgdump


def proc():
    # check if this is the initial commit
    branch = current_branch()
    if branch == 'master':
        msgdump('warn', 'commit directly to master branch is dangerous')
    cmd = 'git rev-parse --verify HEAD'
    retcode = subp.call(cmd.split(), stdin=subp.DEVNULL, stdout=subp.DEVNULL, stderr=subp.DEVNULL)
    against = 'HEAD'
    if retcode != 0:  # "pre-commit: About to create the first commit..."
        # git hash-object -t tree --stdin </dev/null
        against = '4b825dc642cb6eb9a060e54bf8d69288fbee4904'
    #  to allow non-ASCII filenames set this variable to true.
    cmd = 'git config --type=bool hooks.allownonascii'
    retcode, output = subp.getstatusoutput(cmd.split(' '))
    output = output.rstrip()
    if output != 'true':
        # Cross platform projects tend to avoid non-ASCII filenames
        # prevent them from being added to the repository
        # We exploit the fact that the printable range starts at the space character and ends with tilde.
        cmd = f'git diff --cached --name-only --diff-filter=A -z {against}'
        null_char = bytes(1)
        for fpath in subp.check_output(cmd.split(' '))[:-1].split(null_char):
            fpath = fpath.decode('utf-8')
            if not fpath.isprintable():
                msgdump('error', f'non-printable filename found: [{fpath}]')
    # use git diff-index to check for whitespace errors
    cmd = f'git diff-index --check --cached {against} --'
    retcode = subp.call(cmd.split(), stdin=subp.DEVNULL)
    if retcode != 0:
        raise ValueError('whitespace error(s) found')


if __name__ == '__main__':
    try:
        proc()
    except Exception as e:
        msgdump('error', f'{e}')
        sys.exit(1)
