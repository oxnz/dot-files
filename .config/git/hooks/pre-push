#!/usr/bin/env python3
#
# This hook script to verify what is about to be pushed.
# Called by "git push" after it has checked the remote status,
# but before anything has been pushed.
# If this script exits with a non-zero status nothing will be pushed.
#

import sys
import subprocess
from common import current_branch, msgdump


# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).
def proc(name, url):
    msgdump('debug', f'{name} => {url}')
    for line in sys.stdin:
        local_ref, local_old, remote_ref, remote_old = line.split()
        # print(f'local: [{local_ref}, {local_old}] => remote: [{remote_ref}, {remote_old}]')
        if local_old == '0'*len(local_old):  # Handle delete
            pass
        else:
            if remote_old == '0'*len(remote_old):  # New branch, examine all commits
                commit_range = local_old
            else:  # Update to existing branch, examine new commits
                commit_range = f'{remote_old}..{local_old}'
            cmd = f'git rev-list -n 1 --grep "^WIP" {commit_range}'
            output = subprocess.check_output(cmd.split(' ')).rstrip().decode('utf-8')
            if output:
                raise ValueError(f'found WIP commit in {local_ref}, pushing aborted')
    if current_branch() == 'master':
        raise ValueError('commit directly to master branch is prohibited')


# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
# If pushing without using a named remote those arguments will be equal.
if __name__ == '__main__':
    name, url = sys.argv[1:]
    try:
        proc(name, url)
    except Exception as e:
        msgdump('error', f'{e}')
        sys.exit(1)
