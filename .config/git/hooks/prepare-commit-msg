#!/usr/bin/env python3

import re
import sys
import enum
from common import CommitCategory
from common import current_branch, msgdump


class CommitSource(enum.Enum):
    TEMPLATE = 'template'
    MESSAGE = 'message'  # triggered by -m/-F
    MERGE = 'merge'
    SQUASH = 'squash'  # squash commits in a branch with --squash
    COMMIT = 'commit'  # triggered by -c/-C/--amend
    UNSPECIFIED = '' # normal ci without template


class CommitScope(enum.Enum):
    # test => REFACTOR
    TEST = 'test'
    # conf => CHORE
    CONF = 'config'
    # perf => REFACTOR
    PERF = 'performance'
    # revert should be considered as category: BUGFIX
    UNDO = 'revert'
    # commit does not involve visible change
    INTERNAL = 'internal'


def proc(f, commit_source, commit_hash):
    '''
    a well-crafted commit message is the best way to communicate context about a change to fellow developers
    and indeed to their future selves
    a diff will tell you what changed, but only the commit message can properly tell you why.
    a commit message shows whether a developer is a good collaborator.
    subject -> [{type}] (scopre) summary

    1. separate subject from body with a blank line
    2. limit the subject line to 50 characters
    3. do not end the subject line with a period
    4. use the imperative mood in the subject line
    5. wrap the body at 72 characters
    6. use the body to explain what and why vs. how
    '''
    branch = current_branch()
    branch_pattern = r'(?P<category>[a-z]{3,10})-(?P<summary>\w{20,50})'
    subject_pattern = r'\[(?P<category>[a-z]{3,10})\] (?P<summary>.{20,50})'
    category = 'category'
    summary = '<brief summary>'
    content = ''
    if commit_source in {CommitSource.TEMPLATE, CommitSource.COMMIT, CommitSource.UNSPECIFIED}:
        r = re.fullmatch(branch_pattern, branch)
        if r:
            category, summary = r.groups()
            summary = summary.replace('_', ' ')
        else:
            msgdump('warn', f'branch name ({branch}) does not match pattern: [{branch_pattern}]')
        content = f.read()
    else:
        msgdump('debug', (f'no changes made to commit msg, commit source: [{commit_source}]'))
        return
    category = CommitCategory(category)
    max_summary_length = 50
    summary = summary[:max_summary_length]
    max_line_length = 72
    max_line_count = 30
    msg = f'''[{category.value}] {summary}

# The previous line is left blank as a separation of subject and body

Multi-line description of commit,
feel free to be detailed.

# - [wiki]
# - [issue]
# - [references]
#
# Notes:
# Enforcing policy checking criteria:
# 1. subject line pattern: {subject_pattern}
# 2. expected categories: {[cat.value for cat in CommitCategory]}
# 3. expected summary length: [20, 50]
# 4. body should wrapped at {max_line_length}
# 5. body line count should keep under {max_line_count}
'''
    f.seek(0, 0)
    f.write(msg)
    f.write(content)


if __name__ == '__main__':
    # This hook takes one, two or three arguments:
    # 1. The name of the file that contains the commit message to be used.
    # 2. The type/source of commit. This can be message, template, merge or squash.
    # 3. The SHA-1/hash of a commit (when operating on an existing commit).
    argv = sys.argv[1:]
    argv.extend([''] * (3 - len(argv)))
    commit_msg_fpath, commit_source, commit_hash = argv
    try:
        with open(commit_msg_fpath, 'r+') as f:
            proc(f, CommitSource(commit_source), commit_hash)
    except Exception as e:
        msgdump('error', f'{e}, source: [{commit_source}]')
        sys.exit(1)
